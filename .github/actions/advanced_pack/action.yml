name: Advanced pack
description: "Advanced pack"

inputs:
  working_directory:
    required: true
    description: "The wokring directory"
  # Supported formats:
  # ./Path
  # Path
  project_directory:
    required: true
    description: "The project directory"
  nuget_name:
    required: true
    description: "The expected package name of the package"
  nuget_version:
    required: true
    description: "The expected package version of the package"
  configuration:
    description: "Build configuration. DEBUG/RELEASE/.."
    required: true
  output_path:
    description: "Output path. For example: ./PROJECT_NAME/package"
    required: true
  glob_to_unzip_package:
    description: "The glob patter to find the default package that will be used to get nuspec file. The default: .nupkg"
    required: false
    default: ".nupkg"
  nuget_pack_options:
    description: "The options for nuget pack. The default: -Symbols -SymbolPackageFormat 'snupkg'"
    required: false
    default: "-Symbols -SymbolPackageFormat snupkg"


runs:
  using: composite
  steps:
    - name: Use NuGet 6.7.x
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '6.7.x'

    - name: Regular pack
      shell: bash
      run: |
        cd ${{ inputs.working_directory }}
        version=${{ inputs.nuget_version }}
        echo "Starting default pack.."
        nuget pack ${{ inputs.project_directory }} -Build -IncludeReferencedProjects -Properties Configuration=${{ inputs.configuration }} -OutputDirectory ${{ inputs.output_path }} -Version $version ${{ inputs.nuget_pack_options }}

    - name: Copy nuspec file
      shell: bash
      run: |
        # TODO: skip if the nuspec already exists
        echo "Prepare nuspec.."
        artifacts=${{ inputs.output_path }}
        unzipped_artifacts="${artifacts}_unzipped"
        echo "Unzipped artifacts path: $unzipped_artifacts"
        cp -r $artifacts $unzipped_artifacts
        cd $unzipped_artifacts

        nuget_for_processing_glob=${{ inputs.glob_to_unzip_package }}

        for file in *"$nuget_for_processing_glob"; do
          if [ -e "$file" ]; then
            echo "Unzipping $file..."
            unzip -o "$file" -d . 
          fi
        done

        echo "Nupkg for processing: $file"
        version=${{ inputs.nuget_version }}
        nuspec_file="${file%.$version$nuget_for_processing_glob}.nuspec"
        if [ ! -f $nuspec_file ]; then
          echo "Nuspec $nuspec_file has not been found"
          exit 1
        fi
        echo "Nuget name: $nuget_name"
        project_directory=${{ inputs.project_directory }}
        nuspec_destination=${GITHUB_WORKSPACE%/}/${project_directory#./}
        echo -e "\nNuspec destination: $nuspec_destination"
        # Copy nuspec file
        cp $nuspec_file $nuspec_destination
        echo "nuspec_destination=${nuspec_destination}" >> $GITHUB_ENV

    - name: Update nuspec file using PowerShell
      shell: pwsh
      run: |
        cd ${{ inputs.working_directory }}
        # 1. Nuspec directory
        $nuspec_Destination = $env:nuspec_destination
        Write-Host "Nuspec destination: $nuspec_Destination"

        $nuspecFiles = Get-ChildItem -Path $nuspec_Destination -Filter *.nuspec -File
        if (!$nuspecFiles) {
            Write-Host "Nuspec file has not been found in $nuspec_Destination"
            exit 1
        }
        if ($nuspecFiles.Count -ne 1) {
            Write-Host "Nuspec file must be single."
            exit 1
        }
        $xmlPath = $nuspecFiles[0]
        if (-not (Test-Path $xmlPath)) {
            Write-Host "Error: The file path '$($xmlPath)' does not exist."
            exit 1
        }
        # Load the XML document
        [xml]$xmlDoc = Get-Content -Raw  $xmlPath
        $nsMgr = New-Object System.Xml.XmlNamespaceManager($xmlDoc.NameTable)
        $nsMgr.AddNamespace("ns", "http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd")
        # 1. Set id
        $idNode = $xmlDoc.SelectSingleNode("//ns:metadata/ns:id", $nsMgr)
        if ($idNode -ne $null) {
            $idNode.InnerText = "${{ inputs.nuget_name }}"
            Write-Host "<id> has been found: $($idNode.InnerText)."
        } else {
            Write-Host "<id> node not found."
            exit 1
        }

        # 2. Set description as git git commit details
        $git_description=(git show --summary) -Join "`r`n"
        # Update the <description> node (supports multi-line text)
        $descriptionNode = $xmlDoc.SelectSingleNode("//ns:metadata/ns:description", $nsMgr)
        if ($descriptionNode -ne $null) {
            $descriptionNode.InnerText = "Commit info: $git_description"
        } else {
            Write-Host "<description> node not found."
            exit 1
        }
        $xmlDoc.Save($xmlPath)
        cat $xmlPath

    - name: Custom pack
      shell: bash
      run: |
        cd ${{ inputs.working_directory }}
        project_directory=${{ inputs.project_directory }}
        if ! ls $project_directory/*.nuspec >/dev/null 2>&1; then
          echo "Error: Nuspec file must exist in ${project_directory}" >&2
          exit 1
        fi
        version=${{ inputs.nuget_version }}
        echo "Starting custom pack.."
        nuget pack $project_directory -Build -IncludeReferencedProjects -Properties Configuration=${{ inputs.configuration }} -OutputDirectory ${{ inputs.output_path }} -Version $version ${{ inputs.nuget_pack_options }}

    - name: Rename original packages
      shell: pwsh
      run: |
        Write-Host "Rename original artifacts"
        $artifacts="${{ inputs.output_path }}"
        $desiredNugetName = "${{ inputs.nuget_name }}"
        Get-ChildItem -Path $artifacts -File | ForEach-Object {
            $currentBaseName = [System.IO.Path]::GetFileNameWithoutExtension($_.Name)
            if (-not ($currentBaseName.StartsWith($desiredNugetName))) {
                Write-Host "#current: $currentBaseName"
                Write-Host "#desired: $desiredNugetName"
                $oldExtension = $_.Extension
                # Compute the new extension by appending ".orig" to the old extension
                $newExtension = "$oldExtension.orig"

                $newPath = [System.IO.Path]::ChangeExtension($_.FullName, $newExtension)
                Write-Host "Changing extension of '$($_.FullName)' to '$newPath'"
                Rename-Item -Path $_.FullName -NewName $newPath
            }
        }
