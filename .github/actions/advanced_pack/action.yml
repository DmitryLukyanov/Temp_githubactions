name: Advanced pack

inputs:
  working_directory:
    required: true
  # Supported formats:
  # ./Path
  # Path
  project_directory:
    required: true
  nuget_name:
    required: true
  nuget_version:
    required: true
  configuration:
    required: true
  output_path:
    required: true

runs:
  using: composite
  steps:
    - name: Use NuGet 6.7.x
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '6.7.x'

    - name: Regular pack
      shell: bash
      run: |
        cd ${{ inputs.working_directory }}
        version=${{ inputs.nuget_version }}
        echo "Starting default pack.."
        nuget pack ${{ inputs.project_directory }} -Build -IncludeReferencedProjects -Properties Configuration=${{ inputs.configuration }} -Symbols -OutputDirectory ${{ inputs.output_path }} -Version $version

    - name: Copy nuspec file
      shell: bash
      run: |
        # TODO: skip if the nuspec already exists
        echo "Prepare nuspec.."
        artifacts=${{ inputs.output_path }}
        unzipped_artifacts="${artifacts}_unzipped"
        echo "Unzipped artifacts path: $unzipped_artifacts"
        cp -r $artifacts $unzipped_artifacts
        cd $unzipped_artifacts
        for file in *.symbols.nupkg; do
          if [ -e "$file" ]; then
            echo "Unzipping $file..."
            unzip -o "$file" -d . 
          fi
        done
        echo "Nupkg for processing: $file"
        version=${{ inputs.nuget_version }}
        nuspec_file="${file%.$version.symbols.nupkg}.nuspec"
        if [ ! -f $nuspec_file ]; then
          echo "Nuspec $nuspec_file has not been found"
          exit 1
        fi
        echo "Nuget name: $nuget_name"
        project_directory=${{ inputs.project_directory }}
        nuspec_destination=${GITHUB_WORKSPACE%/}/${project_directory#./}
        echo -e "\nNuspec destination: $nuspec_destination"
        # Copy nuspec file
        cp $nuspec_file $nuspec_destination
        echo "nuspec_destination=${nuspec_destination}" >> $GITHUB_ENV

    - name: Update nuspec file using PowerShell
      shell: pwsh
      run: |
        cd ${{ inputs.working_directory }}
        # 1. Nuspec directory
        $nuspec_Destination = $env:nuspec_destination
        Write-Host "Nuspec destination: $nuspec_Destination"

        $nuspecFiles = Get-ChildItem -Path $nuspec_Destination -Filter *.nuspec -File
        if (!$nuspecFiles) {
            Write-Host "Nuspec file has not been found in $nuspec_Destination"
            exit 1
        }
        if ($nuspecFiles.Count -ne 1) {
            Write-Host "Nuspec file must be single."
            exit 1
        }
        # 1. nuspec description
        $git_description=(git show --summary) -Join '\n'

        # $git_description = $env:git_description
        # $xmlPath = $nuspecFiles[0]
        # if (-not (Test-Path $xmlPath)) {
        #     throw "Error: The file path '$($xmlPath)' does not exist."
        # }
        # # Load the XML document
        # [xml]$xmlDoc = Get-Content -Raw  $xmlPath
        # $nsMgr = New-Object System.Xml.XmlNamespaceManager($xmlDoc.NameTable)
        # $nsMgr.AddNamespace("ns", "http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd")
        # # Update the <id> node
        # $idNode = $xmlDoc.SelectSingleNode("//ns:metadata/ns:id", $nsMgr)
        # if ($idNode -ne $null) {
        #     $idNode.InnerText = "${{ inputs.nuget_name }}"
        #     Write-Host "<id> has been found: $($idNode.InnerText)."
        # } else {
        #     Write-Host "<id> node not found."
        # }
        # Update the <description> node (supports multi-line text)
        # $descriptionNode = $xmlDoc.SelectSingleNode("//ns:metadata/ns:description", $nsMgr)
        # if ($descriptionNode -ne $null) {
        #     $descriptionNode.InnerText = "temp"
        # } else {
        #     Write-Host "<description> node not found."
        # }
        # $xmlDoc.Save($xmlPath)
        # cat $xmlPath

    # - name: Custom pack
    #   shell: bash
    #   run: |
    #     cd ${{ inputs.working_directory }}
    #     project_directory=${{ inputs.project_directory }}
    #     if ! ls $project_directory/*.nuspec >/dev/null 2>&1; then
    #       echo "Error: Nuspec file must exist in ${project_directory}" >&2
    #       exit 1
    #     fi
    #     version=${{ inputs.nuget_version }}
    #     echo "Starting custom pack.."
    #     nuget pack $project_directory -Build -IncludeReferencedProjects -Properties Configuration=${{ inputs.configuration }} -Symbols -OutputDirectory ${{ inputs.output_path }} -Version $version
 