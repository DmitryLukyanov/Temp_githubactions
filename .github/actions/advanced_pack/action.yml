name: Advanced pack
description: "Advanced pack"
 
inputs:
  working_directory:
    required: true
    description: "The working directory"
  project_directory:
    required: true
    description: "The project directory. Supported formats: './Path' | 'Path'"
  nuget_name:
    required: true
    description: "The expected package name of the package"
  nuget_version:
    required: false
    default: ""
    description: "The expected package version of the package"
  configuration:
    description: "Build configuration. DEBUG | RELEASE | .."
    required: true
  output_path:
    description: "Output path. For example: ./PROJECT_NAME/package"
    required: true
  nuget_pack_options:
    description: "The options for nuget pack. The default: -Symbols -SymbolPackageFormat 'snupkg'"
    required: false
    default: "-Build -IncludeReferencedProjects -Symbols -SymbolPackageFormat snupkg"
 
runs:
  using: composite
  steps:
    - name: Use NuGet 6.7.x
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '6.7.x'
 
      # create a package a default pack configuration
      # unfortunately, such approach doesn't allow specififying custom package metadata like name and description, so proceed with next steps
    - name: Regular pack
      shell: bash
      run: |
        echo "================================== Regular pack ========================================"
        cd ${{ inputs.working_directory }}
        version=${{ inputs.nuget_version }}
        echo "Starting default pack.."

        if [ $version ]; then
          output=$(nuget pack ${{ inputs.project_directory }} -Version $version -Properties Configuration=${{ inputs.configuration }} -OutputDirectory ${{ inputs.output_path }} ${{ inputs.nuget_pack_options }})
        else
          output=$(nuget pack ${{ inputs.project_directory }} -Properties Configuration=${{ inputs.configuration }} -OutputDirectory ${{ inputs.output_path }} ${{ inputs.nuget_pack_options }})
        fi
        echo $output
        package_path=$(echo "$output" \
          | grep "Successfully created package" \
          | head -n 1 \
          | sed -E "s/.*Successfully created package '(.*)'.*/\1/")
        package_file_name="$(basename "$(basename "$package_path")" .nupkg)"
        if [! $package_file_name ]; then
          echo "!!!"
          exit 1
        fi
        echo "package_file_name: $package_file_name"
        echo "created_package_name=${package_file_name}" >> $GITHUB_ENV
 
